@page "/washing/queue"
@using PLKSYS.Core.Models
@using PLKSYS.Client.Services
@inject WashingService WashingService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Washing,Admin,Superadmin")]

<PageTitle>Yıkama Kuyruğu</PageTitle>

<h3 class="text-2xl font-bold mb-6 text-gray-800">Bekleyen Yıkama Araçları</h3>

@if (loading)
{
    <p><em>Yükleniyor...</em></p>
}
else if (pendingEntries == null || !pendingEntries.Any())
{
    <p class="text-gray-600">Bekleyen yıkama aracı bulunmamaktadır.</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var entry in pendingEntries)
        {
            <div class="bg-white p-6 rounded-lg shadow-md border border-blue-400">
                <h4 class="text-black text-xl font-semibold mb-2">Plaka: @entry.PlateNumber</h4>
                <p class="text-gray-700 mb-1"><strong>Gönderen:</strong> @entry.SentByUserName</p>
                <p class="text-gray-700 mb-3"><strong>Yıkamaya Gönderilme Saati:</strong> @entry.SentToWashingTime.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</p>

                <button @onclick="() => MarkCompleted(entry.Id)"
                        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    Yıkamayı Tamamla
                </button>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="mt-4 p-3 rounded-md @(isSuccess ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700")">
        @message
    </div>
}

@code {
    private IEnumerable<WashingQueueEntry>? pendingEntries;
    private bool loading = true;
    private string message = string.Empty;
    private bool isSuccess = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPendingEntries();
    }

    private async Task LoadPendingEntries()
    {
        loading = true;
        try
        {
            pendingEntries = await WashingService.GetPendingWashingEntriesAsync();
        }
        catch (Exception ex)
        {
            message = $"Yıkama kuyruğu yüklenirken bir hata oluştu: {ex.Message}";
            isSuccess = false;
            Console.WriteLine($"Error loading washing queue: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task MarkCompleted(Guid entryId)
    {
        try
        {
            var updatedEntry = await WashingService.MarkWashingCompletedAsync(entryId);
            if (updatedEntry != null)
            {
                isSuccess = true;
                message = $"Araç '{updatedEntry.PlateNumber}' için yıkama başarıyla tamamlandı.";
                await LoadPendingEntries(); // Listeyi yenile
            }
            else
            {
                isSuccess = false;
                message = "Yıkama durumu güncellenirken bir hata oluştu.";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            message = $"Bir hata oluştu: {ex.Message}";
            Console.WriteLine($"Error marking washing completed: {ex.Message}");
        }
    }
}
