@page "/security/entry"

@attribute [Authorize(Roles = "Superadmin,Admin,Güvenlik")]

@using PLKSYS.Client.Services

@using PLKSYS.Core.Models

@using System.ComponentModel.DataAnnotations

@using System.Security.Claims

@using System.Net.Http

@using System.Net.Http.Json

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider AuthStateProvider



<PageTitle>Güvenlik - Araç Giriş Kartı</PageTitle>



    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative mb-4 shadow-md" role="alert">
            <span class="block sm:inline">@errorMessage</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-md relative mb-4 shadow-md" role="alert">
            <span class="block sm:inline">@successMessage</span>
        </div>
    }

    @* Giriş Türü Seçimi Kartı *@
    <div class="max-w-4xl mx-auto py-8 px-4">
        <h2 class="text-4xl font-extrabold text-gray-900 mb-8 text-center">Giriş Türü Seçimi</h2>
        

        <div class="grid grid-cols-1 md:grid-cols-2  gap-6">
            <button @onclick="SelectAppointmentEntry"
                    class="flex flex-col bg-white items-center justify-center p-6 border-2 rounded-lg transition-all duration-300
                           @(entryType == "appointment" ? "border-indigo-500 bg-indigo-50 shadow-md" : "border-gray-200 hover:border-indigo-300 hover:bg-indigo-50")">
                <div class="flex items-center mb-4">
                    <div class="bg-indigo-100 p-3 rounded-full mr-4 transition-colors duration-300
                                @(entryType == "appointment" ? "bg-indigo-600" : "group-hover:bg-indigo-500")">
                        <svg class="w-8 h-8 text-indigo-600 transition-colors duration-300
                                    @(entryType == "appointment" ? "text-white" : "group-hover:text-white")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a4 4 0 118 0v4m-4 6v6"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 transition-colors duration-300
                               @(entryType == "appointment" ? "text-indigo-700" : "group-hover:text-indigo-600")">
                        Randevulu Giriş
                    </h3>
                </div>
                <p class="text-gray-600 text-center mb-4">Önceden rezervasyon yapmış müşteriler için hızlı giriş işlemi.</p>
                <div class="text-sm text-gray-500 text-center">
                    ✓ Sadece plaka numarası gerekli
                </div>
            </button>

            <button @onclick="SelectWalkInEntry"
                    class="flex flex-col bg-white items-center justify-center p-6 border-2 rounded-lg transition-all duration-300
                           @(entryType == "walk-in" ? "border-blue-500 bg-blue-50 shadow-md" : "border-gray-200 hover:border-blue-300 hover:bg-blue-50")">
                <div class="flex items-center mb-4">
                    <div class="bg-blue-100 p-3 rounded-full mr-4 transition-colors duration-300
                                @(entryType == "walk-in" ? "bg-blue-600" : "group-hover:bg-blue-500")">
                        <svg class="w-8 h-8 text-blue-600 transition-colors duration-300
                                    @(entryType == "walk-in" ? "text-white" : "group-hover:text-white")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 transition-colors duration-300
                               @(entryType == "walk-in" ? "text-blue-700" : "group-hover:text-blue-600")">
                        Randevusuz Giriş
                    </h3>
                </div>
                <p class="text-gray-600 text-center mb-4">Plansız ziyaret eden müşteriler için detaylı kayıt işlemi.</p>
                <div class="text-sm text-gray-500 text-center">
                    ℹ Detaylı bilgi formu gerekli
                </div>
            </button>
        </div>
    </div>

    @* Randevulu Giriş Formu *@
    @if (entryType == "appointment")
    {
        <div class="mb-8 p-6 bg-white rounded-lg shadow-xl">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-gray-800">Randevulu Araç Girişi</h2>
                <button @onclick="ClearSelection" class="text-gray-500 hover:text-gray-700 transition-colors duration-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <EditForm Model="@appointmentRequest" OnValidSubmit="HandleAppointmentEntry" FormName="appointmentForm" class="space-y-6">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-500 text-sm mb-4 p-3 bg-red-50 rounded-md border border-red-200" />

                <div>
                    <label for="appointmentPlate" class="block text-gray-700 text-sm font-semibold mb-2">Araç Plaka Numarası:</label>
                    <InputText id="appointmentPlate" @bind-Value="appointmentRequest.PlateNumber"
                               placeholder="Örnek: 34 ABC 123"
                               class="mt-1 block w-full px-4 py-2 border border-gray-800 text-black rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200" />
                    <ValidationMessage For="@(() => appointmentRequest.PlateNumber)" class="text-red-500 text-xs italic mt-1" />
                </div>

                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" @onclick="ClearSelection"
                            class="px-5 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200">
                        İptal Et
                    </button>
                    <button type="submit" disabled="@isProcessing"
                            class="px-5 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed">
                        @if (isProcessing)
                        {
                            <span class="flex items-center">
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                İşleniyor...
                            </span>
                        }
                        else
                        {
                            <span>Giriş Kaydet</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    }

    @* Randevusuz Giriş Formu *@
    @if (entryType == "walk-in")
    {
        <div class="mb-8 p-6 bg-white rounded-lg shadow-xl">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-gray-800">Randevusuz Araç Girişi</h2>
                <button @onclick="ClearSelection" class="text-gray-500 hover:text-gray-700 transition-colors duration-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <EditForm Model="@walkInRequest" OnValidSubmit="HandleWalkInEntry" FormName="walkInForm" class="space-y-6">
                <DataAnnotationsValidator />
                

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="walkInPlate" class="block text-gray-700 text-sm font-semibold mb-2">Araç Plaka Numarası:</label>
                        <InputText id="walkInPlate" @bind-Value="walkInRequest.PlateNumber"
                                   placeholder="Örnek: 34 ABC 123"
                                   class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-black focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                    <ValidationMessage For="@(() => walkInRequest.PlateNumber)" class="text-red-500 text-xs italic mt-1" />
                    </div>

                    <div>
                        <label for="visitorName" class="block text-gray-700 text-sm font-semibold mb-2">Ziyaretçi Adı:</label>
                        <InputText id="visitorName" @bind-Value="walkInRequest.VisitorName"
                                   placeholder="Adınızı giriniz"
                                   class="mt-1 block w-full px-4 py-2 border border-gray-300 text-black rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                        <ValidationMessage For="@(() => walkInRequest.VisitorName)" class="text-red-500 text-xs italic mt-1" />
                    </div>

                    <div>
                        <label for="visitorSurname" class="block text-gray-700 text-sm font-semibold mb-2">Ziyaretçi Soyadı:</label>
                        <InputText id="visitorSurname" @bind-Value="walkInRequest.VisitorSurname"
                                   placeholder="Soyadınızı giriniz"
                                   class="mt-1 block w-full px-4 py-2 border border-gray-300 text-black rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                        <ValidationMessage For="@(() => walkInRequest.VisitorSurname)" class="text-red-500 text-xs italic mt-1" />
                    </div>

                    <div>
                        <label for="visitedDepartment" class="block text-gray-700 text-sm font-semibold mb-2">Ziyaret Edilecek Birim:</label>
                        <InputSelect id="visitedDepartment" @bind-Value="walkInRequest.VisitedDepartment"
                                     class="mt-1 block w-full px-4 py-2 border text-black rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200">
                            <option value="">Birim Seçiniz</option>
                            <option value="Servis">Servis</option>
                            <option value="Satış">Satış</option>
                            <option value="Sigorta">Sigorta</option>
                            <option value="Muhasebe">Muhasebe</option>
                            <option value="Yıkama">Yıkama</option>
                            <option value="Müşteritemsilcisi">Müşteri Temsilcisi</option>
                            <option value="Yönetim">Yönetim</option>
                            <option value="Diğer">Diğer</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => walkInRequest.VisitedDepartment)" class="text-red-500 text-xs italic mt-1" />
                    </div>

                    <div class="md:col-span-2">
                        <label for="visitedPersonnel" class="block text-gray-700 text-sm font-semibold mb-2">Ziyaret Edilecek Personel:</label>
                        <InputText id="visitedPersonnel" @bind-Value="walkInRequest.VisitedPersonnel"
                                   placeholder="Görüşeceğiniz personelin adını giriniz"
                               class="mt-1 block w-full px-4 py-2 border border-gray-300 text-black rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                        <ValidationMessage For="@(() => walkInRequest.VisitedPersonnel)" class="text-red-500 text-xs italic mt-1" />
                    </div>

                    <div class="md:col-span-2">
                        <label for="visitReason" class="block text-gray-700 text-sm font-semibold mb-2">Ziyaret Nedeni:</label>
                        <InputTextArea id="visitReason" @bind-Value="walkInRequest.VisitReason" rows="3"
                                       placeholder="Ziyaret nedeninizi detaylı bir şekilde açıklayın..."
                                       class="mt-1 block w-full px-4 py-2 border border-gray-300 text-black rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                        <ValidationMessage For="@(() => walkInRequest.VisitReason)" class="text-red-500 text-xs italic mt-1" />
                    </div>
                </div>

                <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-md mb-4 shadow-sm">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-yellow-700">
                                <strong>Önemli:</strong> Randevusuz girişlerde araç çıkışı için muhasebe departmanından onay alınması gerekmektedir.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" @onclick="ClearSelection"
                            class="px-5 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                        İptal Et
                    </button>
                    <button type="submit" disabled="@isProcessing"
                            class="px-5 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed">
                        @if (isProcessing)
                        {
                            <span class="flex items-center">
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                İşleniyor...
                            </span>
                        }
                        else
                        {
                            <span>Kayıt Oluştur</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    }

    @* Araç Çıkışı ve Onay Bölümü *@

<div class="lg:col-span-2 flex justify-center  ">
        @* Araç Çıkışı Formu *@
    <div class="w-full max-w-2xl p-6 bg-white rounded-lg shadow-xl ">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Araç Çıkış İşlemi</h2>

            <EditForm Model="@exitRequest" OnValidSubmit="HandleVehicleExit" FormName="vehicleExitForm" class="space-y-6">
                <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 text-sm mb-4 p-3 bg-red-50 rounded-md border border-red-200" />

                <div>
                    <label for="exitPlate" class="block text-gray-700 text-sm font-semibold mb-2">Çıkış Yapacak Araç Plakası:</label>
                    <InputText id="exitPlate" @bind-Value="exitRequest.PlateNumber"
                               placeholder="Örnek: 34ABC123"
                               class="mt-1 block w-full px-4 py-2 border border-gray-300 text-black rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200" />
                    
                </div>

                <button type="submit" disabled="@isProcessing"
                        class="w-full flex justify-center py-2 px-5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-800 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isProcessing)
                    {
                        <span class="flex items-center">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            İşleniyor...
                        </span>
                    }
                    else
                    {
                        <span>Çıkış Kaydet</span>
                    }
                </button>
            </EditForm>
        </div>

        @* Onay Bekleyen Çıkışlar Listesi *@
        @if (currentUserDepartment == "Muhasebe" || currentUserRole == "Superadmin" || currentUserRole == "Admin")
        {
            <div class="p-6 bg-white rounded-lg shadow-xl">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Onay Bekleyen Çıkışlar</h2>

                @if (pendingExits == null)
                {
                    <p class="text-gray-600">Yükleniyor...</p>
                }
                else if (!pendingExits.Any())
                {
                    <p class="text-gray-600">Onay bekleyen araç bulunmamaktadır.</p>
                }
                else
                {
                    <div class="space-y-4 max-h-80 overflow-y-auto pr-2">
                        @* pr-2 scrollbar için boşluk bırakır *@
                        @foreach (var vehicle in pendingExits)
                        {
                            <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 shadow-sm flex items-center justify-between">
                                <div>
                                    <h4 class="font-bold text-gray-900 text-lg">@vehicle.PlateNumber</h4>
                                    <p class="text-sm text-gray-600">Müşteri: @vehicle.CustomerName</p>
                                    <p class="text-xs text-gray-500">
                                        Giriş: @vehicle.LastEntryTime.ToLocalTime().ToString("dd.MM.yyyy HH:mm")
                                    </p>
                                    <p class="text-xs text-gray-500">
                                        Durum: <span class="font-semibold text-yellow-700">@vehicle.CurrentStatus</span>
                                    </p>
                                </div>
                                <button @onclick="() => ApproveExit(vehicle.PlateNumber)"
                                        class="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-md text-sm font-medium transition duration-300 shadow-md">
                                    Onayla
                                </button>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>




@code {

    // Servisleri inject etme

    [Inject]

    public PLKSYS.Client.Services.VehicleService VehicleService { get; set; } = default!;



    private string? entryType = null; // "appointment" veya "walk-in"

    private string? errorMessage;

    private string? successMessage;

    private bool isProcessing = false;

    private string? currentUserDepartment;

    private string? currentUserRole;

    private List<Vehicle>? pendingExits;



    // Form modelleri

    private PlateEntryRequest appointmentRequest = new();

    private WalkInEntryRequest walkInRequest = new();

    private PlateEntryRequest exitRequest = new();



    protected override async Task OnInitializedAsync()

    {

        // Kullanıcı bilgilerini al

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;



        if (user.Identity?.IsAuthenticated ?? false)

        {

            currentUserDepartment = user.FindFirst("Department")?.Value;

            currentUserRole = user.FindFirst(ClaimTypes.Role)?.Value;

        }



        // Muhasebe kullanıcıları için onay bekleyen çıkışları yükle

        if (currentUserDepartment == "Muhasebe" || currentUserRole == "Superadmin" || currentUserRole == "Admin")

        {

            await LoadPendingExits();

        }

    }



    private async Task LoadPendingExits()
    {
        try
        {
            // GetVehiclesByStatus metodunu kullanarak onay bekleyen araçları al
            pendingExits = await VehicleService.GetVehiclesPendingExitApproval();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pending exits: {ex.Message}");
            pendingExits = new List<Vehicle>(); // Boş liste döndür
        }
    }



    private void SelectAppointmentEntry()

    {

        entryType = "appointment";

        ClearMessages();

        appointmentRequest = new PlateEntryRequest();

    }



    private void SelectWalkInEntry()

    {

        entryType = "walk-in";

        ClearMessages();

        walkInRequest = new WalkInEntryRequest();

    }



    private void ClearSelection()

    {

        entryType = null;

        ClearMessages();

        appointmentRequest = new PlateEntryRequest();

        walkInRequest = new WalkInEntryRequest();

    }



    private void ClearMessages()

    {

        errorMessage = null;

        successMessage = null;

    }



    private async Task HandleAppointmentEntry()

    {

        if (isProcessing) return;



        isProcessing = true;

        ClearMessages();

        StateHasChanged();



        try

        {

            var enteredVehicle = await VehicleService.RegisterVehicleEntry(appointmentRequest);

            successMessage = $"Plaka '{enteredVehicle?.PlateNumber}' randevulu giriş başarıyla kaydedildi!";

            appointmentRequest = new PlateEntryRequest();

            ClearSelection();

        }

        catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.Unauthorized || httpEx.StatusCode == System.Net.HttpStatusCode.Forbidden)

        {

            errorMessage = "Araç girişi kaydetmeye yetkiniz yok. Lütfen giriş yaptığınızdan ve doğru role sahip olduğunuzdan emin olun.";

        }

        catch (Exception ex)

        {

            errorMessage = $"Hata oluştu: {ex.Message}";

        }

        finally

        {

            isProcessing = false;

            StateHasChanged();

        }

    }



    private async Task HandleWalkInEntry()

    {

        if (isProcessing) return;



        isProcessing = true;

        ClearMessages();

        StateHasChanged();



        try

        {

            // Bu metodu VehicleService'e eklemeniz gerekecek

             var response = await VehicleService.RegisterWalkInEntry(walkInRequest);

            successMessage = $"Randevusuz giriş başarıyla kaydedildi! (Çıkış için muhasebe onayı gerekecek)";

            walkInRequest = new WalkInEntryRequest();

            ClearSelection();

        }

        catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.Unauthorized || httpEx.StatusCode == System.Net.HttpStatusCode.Forbidden)

        {

            errorMessage = "Araç girişi kaydetmeye yetkiniz yok.";

        }

        catch (Exception ex)

        {

            errorMessage = $"Hata oluştu: {ex.Message}";

        }

        finally

        {

            isProcessing = false;

            StateHasChanged();

        }

    }



    private async Task HandleVehicleExit()

    {

        if (isProcessing) return;



        isProcessing = true;

        ClearMessages();

        StateHasChanged();



        try

        {

            var exitedVehicle = await VehicleService.RegisterVehicleExit(exitRequest);

            successMessage = $"Plaka '{exitedVehicle?.PlateNumber}' başarıyla çıkış yaptı!";

            exitRequest = new PlateEntryRequest();

        }

        catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.Unauthorized || httpEx.StatusCode == System.Net.HttpStatusCode.Forbidden)

        {

            errorMessage = "Bu araç için çıkış yapmaya yetkiniz yok veya muhasebe onayı gerekiyor.";

        }

        catch (Exception ex)

        {

            errorMessage = $"Hata oluştu: {ex.Message}";

        }

        finally

        {

            isProcessing = false;

            StateHasChanged();

        }

    }



    private async Task ApproveExit(string plateNumber)
    {
        try
        {
            // ExitApprovalRequest objesi oluştur
            var approvalRequest = new ExitApprovalRequest
                {
                    PlateNumber = plateNumber
                };

            // Düzeltilmiş metod çağrısı
            await VehicleService.ApproveExit(approvalRequest);

            successMessage = $"{plateNumber} plakalı aracın çıkışı onaylandı!";
            await LoadPendingExits(); // Listeyi yenile
        }
        catch (Exception ex)
        {
            errorMessage = $"Onay işlemi sırasında hata oluştu: {ex.Message}";
        }
    }
}
